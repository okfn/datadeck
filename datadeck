#!/usr/bin/python
# -*- coding: utf-8 -*-
# vim: ts=4 
###
#
# Copyright (c) 2011 J. Félix Ontañón
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# Authors : J. Félix Ontañón <fontanon@emergya.es>
# 
###

import os
import sys
import gtk
import gobject
import webkit

from utils import GConfStore
from xdg.BaseDirectory import xdg_data_home

from manager import DataPackageManager

# FIXME: This path needs to be assigned at installing time
DATADECK_INDEX = 'ckanjs/index.html'
DATADECK_UI = 'datadeck.ui'
GCONF_KEY = '/apps/datadeck'
LOCAL_PACKAGES_DIR = os.path.join(xdg_data_home, 'datadeck')

ICON_COL, NAME_COL, TYPE_COL = range(3)

# Load icons
theme = gtk.icon_theme_get_default()
remote_hub_icon = theme.load_icon('network-server', 24, 0)
package_icon = theme.load_icon('package', 24, 0)
home_icon = theme.load_icon('go-home', 24, 0)

if not os.path.exists(LOCAL_PACKAGES_DIR):
    os.mkdir(LOCAL_PACKAGES_DIR)
package_manager = DataPackageManager(LOCAL_PACKAGES_DIR)

class DataDeckGUI(GConfStore):

    defaults = {
            'window_width': 600,
            'window_height': 400,
            'datahub_hpaned': 150,
    }

    def __init__(self):
        GConfStore.__init__(self, GCONF_KEY)
        self.rows = {}

        self.builder = gtk.Builder()
        if not self.builder.add_from_file(DATADECK_UI):
            raise 'Cant load %s' % DATADECK_UI
        self.builder.connect_signals(self)

        # Widgets
        self.main_window = self.builder.get_object('main_window')
        self.about_dialog = self.builder.get_object('about_dialog')
        self.datahub_hpaned = self.builder.get_object('datahub_hpaned')
        self.datahub_treestore = self.builder.get_object('datahub_treestore')
        self.webview_scroll = self.builder.get_object('webview_scroll')

        self.search_entry = self.builder.get_object('search_entry')
        self.search_entry.set_property('primary-icon-sensitive',False)
        self.search_entry.set_property('secondary-icon-sensitive',False)

        # Web view
        self.web_view = webkit.WebView()
        self.webview_scroll.add(self.web_view)

        # About dialog
        self.about_dialog = self.builder.get_object('about_dialog')        
        self.about_dialog.connect('response', lambda d, r: d.hide())

        # Load gconf preferences
        self.loadconf()

        # Track main window width/height
        def catch_window_size(widget, allocate, options):
            options['window_width'] = allocate.width
            options['window_height'] = allocate.height

        self.main_window.connect('size_allocate', catch_window_size, 
            self.options)

        # Restore paned window positions
        self.datahub_hpaned.set_position(self.options['datahub_hpaned'])

        # Populate
        self.populate()

        # Restore main window width/height
        self.main_window.show_all()
        self.main_window.resize(self.options['window_width'], 
            self.options['window_height'])

    def populate(self):
        remote = self.datahub_treestore.append(None, [remote_hub_icon, 'DataHubs',
            'datahubroot'])
        local = self.datahub_treestore.append(None, [home_icon, 'Local Packages',
            'localpkgroot'])

        self.datahub_treestore.append(remote, [remote_hub_icon, 'CKAN DataHub',
            'datahub'])
        self.datahub_treestore.append(remote, [remote_hub_icon, 'data.gov.uk', 
            'datahub'])
        self.datahub_treestore.append(remote, [remote_hub_icon, 'data.gov', 
            'datahub'])

        package_manager.scan()
        for package_id, package in package_manager.items():
            self.datahub_treestore.append(local, [package_icon, 
                package.name, 'localpkg'])

        self.index_abs_path = os.path.join(os.path.abspath(sys.path[0]), 
                DATADECK_INDEX)
        self.web_view.open('file://%s' % self.index_abs_path)

    def datahub_treeview_cursor_changed_cb(self, treeview):
        selection = treeview.get_selection()
        model, selected = selection.get_selected()

        if selected:
            row = model[selected]
            if row[TYPE_COL] == 'localpkg':
                data_package = package_manager[row[NAME_COL]]

                dataset_view_path = self.index_abs_path + '#dataset/view/' + \
                    data_package.id
                self.web_view.open('file://%s' % dataset_view_path)

    def search_entry_activate_cb(self, entry):
        self.web_view.execute_script("window.location.href = \
            $('#search-link').attr('href')")
        self.web_view.execute_script("$('input.search').val('%s'); \
            $('#search-form').submit();" % self.search_entry.get_text())

    def add_dataset_action_activate_cb(self, action):
        self.web_view.execute_script("window.location.href = \
            $('#add-link').attr('href')")

    def configure_action_activate_cb(self, action):
        self.web_view.execute_script("window.location.href = \
            $('.config-show').attr('href')")

    def about_action_activate_cb(self, widget):
        self.about_dialog.run()

    def quit_action_activate_cb(self, data=None):
        self.options['datahub_hpaned'] = self.datahub_hpaned.get_position()
        self.saveconf()
        sys.exit(0)

if __name__ == '__main__':
    DataDeckGUI()
    gobject.MainLoop().run()
